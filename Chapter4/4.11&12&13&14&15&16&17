4.11
a>b && b>c && c>d
4.12
 假设i，j和k三个整数，说明表达式i!=j<k的含义
A：c++规定< <= > >= 的优先级高于==和！=，因此上式的求值过程等同于i！=（j<k），意即先比较j和k的大小，得到的结果是一个布尔值（1或0）；然后判断i的值与之是否相等
4.13
int i;   double d;
d = i = 3.5; // i = 3, d = 3.0
i = d = 3.5; // d = 3.5, i = 3
4.14
if（42=i） //错误，赋值运算符的左侧运算对象必须是左值，字面值常量42显然不是左值，不能作为左侧运算对象。
if（i=42） //42赋值给i，因为非0整数转换成布尔值都对应true，所以该条件恒为真
           //如果要判断i的值是否为42，应写成 i == 42
4.15
double dval; int ival; int *pi;
dval = ival = pi = 0;
pi是指针，不能赋给int型的ival
应改成：
  dval = ival = 0;
  pi = 0;

4.16
A：
if ((p = getPtr()) != 0)
if (i == 1024)

4.17
说明前置递增运算符和后置递增运算符的区别。
A:
前置版本首先将运算符对象加1（或减1），然后把改变后的对象作为求值结果 
后置版本也将运算对象加1（或减1），但是求值结果是运算对象改变之前那个值的副本
两种运算符必须作用于左值运算对象。前置版本将对象本身作为左值返回，后置版本则将对象原始值的副本作为右值返回。
int i = 0，j;
j = ++i;
//j = 1,i = 1:前置版本得到递增之后的值
j = i++;
//j = 1,i = 2:后置版本得到递增之前的值
