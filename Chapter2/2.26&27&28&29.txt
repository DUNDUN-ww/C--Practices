2.26
（1）const int buf;       // 不合法，声明一个const常量的同时必须初始化
（2）int cnt = 0;         // 合法，声明并初始化一个int变量
（3）const int sz = cnt;  // 合法，声明一个int const常量，并初始化。
（4）++ cnt; ++sz;        // 不合法，sz为常量，不能进行++操作。

2.27
（a）int i = -1, &r = 0;         // 不合法， 非常量引用r不能引用字面值常量0
（b）int *const p2 = &i2;        // 合法，p2是一个常量指针，p2的值永不改变，即p2永远指向变量i2
（c）const int i = -1, &r = 0;   // 合法，i是一个常量，r是一个常量引用
（d）const int* const p3 = &i2;  // 合法，p3是一个常量指针，p3的值永不改变，即p3永远指向变量i2；
                                 // 同时p3指向的是常量，即我们不能通过p3改变所指对象值
（e）const int *p1 = &i2;        // 合法，p1指向一个常量，即我们不能通过p1改变所指对象值
（f）const int &const r2;        // 不合法，引用本身不是对象，因此不能让引用恒定不变
（g）const int i2 = i, &r = i;   // 合法，i2是一个常量，r是一个常量引用

const int *p = &a   //常量指针，指针的指向可以修改，但是指针指向的值不可以修改
int *const p = &a   //指针常量，指针的指向不可以修改，但是指针指向的值可以修改
const int *const p = &a //const即修饰指针又修饰常量，指针指向和指向的值都不可以修改


2.28
（a） int i, *const cp;       // 不合法，cp是一个常量指针，值不能改变，必须初始化。
（b） int *p1, *const p2;     // 不合法，p2是一个常量指针，值不能改变，必须初始化
（c） const int ic, &r = ic;  // 不合法，ic是一个常量，因其值不能改变，所以必须初始化。
（d） const int *const p3;    // 不合法，p3是一个常量指针，因其值不能改变，所以必须初始化。
（e） const int *p;           // 合法，但是p没有指向任何实际的对象

2.29
（a） i = ic;   // 合法,常量ic的值赋给了非常量i
（b） p1 = p3;  // 不合法，普通指针p1指向了一个常量，从语法上说，p1的值可以随意修改,p1也应为常量
（c） p1 = &ic  // 不合法，普通指针p1指向了一个常量，从语法上说，p1的值可以随意修改,p1也应为常量
（d） p3 = &ic  // 不合法，p3是一个常量指针，不能被赋值
（e） p2 = p1;  // 不合法，p2是一个常量指针，不能被赋值
（f） ic = *p3; // 不合法，ic是常量，不能被赋值
