2.32
int null = 0,*p = null;//不合法
// int null = 0,*p = &null;
// int null = 0,*p = nullptr;

2.33
a=42;//合法，a是一个整数
b=42;//合法，b是一个整数
c=42;//合法，c是一个整数
d=42;//不合法，d是一个整型指针
e=42;//不合法，e是一个指向整数常量的指针
g=42;//不合法，g是一个整型常量引用

2.34
#include<iostream>
using namespace std;
int main()
{
	int i = 0, &r = i;
	auto a = r; //a是一个整数（r是i的别名，而i是个整数）
	const int ci = i, & cr = ci;
	auto b = ci;//b是一个整数（ci的顶层const特性被忽略了）
	auto c = cr;//c是一个整数（cr是ci的别名，ci本身是一个顶层const）
	auto d = &i;//d是一个整型指针（整数的地址就是指向整数的指针）
	auto e = &ci;//e是一个指向整型常量的指针（对常量对象取地址是一种底层const）
	auto &g = ci;//g是一个整型常量的引用，绑定到ci
	cout << a << " " << b << " " << c << " " << d << " " << e << " " << g << endl;

	a = 42; b = 42; c = 42;
	d = 42;   //不能将int类型的值分配到"const int*"类型的实体
	e = 42;   //不能将int类型的值分配到"int*"类型的实体
	g = 42;   //表达式必须是可修改的左值
	cout << a << " " << b << " " << c << " " << d << " " << e << " " << g << endl;
}
