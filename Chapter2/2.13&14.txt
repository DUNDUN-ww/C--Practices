2.13:
int i=42;
int main(){
int i = 100;
int j=i;
}
A: j=100
C++允许内层作用域重新定义外层作用域中已有的名字
在本题中，int i = 42;位于外层作用域，但是变量i在内层作用域被重新定义了，因此真正赋予j的值是定义在内层作用域中的i的值，即100

2.14

#include<iostream>
int main(){
  int i = 100, sum = 0;
  for (int i= 0; i != 10; ++i) sum += i;
	std::cout << i << " " << sum << std::endl;
}

合法,输出100,45
该程序存在嵌套的作用域，其中for循环之外是外层作用域，for循环内部是内层作用域。
首先在外层作用域中定义了i和sum,但是在for循环内部i被重新定义了，因此for循环实际上是从i=0循环到了i=9。
内层作用域中没有重新定义sum，因此sum的初始值是0并在此基础上依次累加。
最后一句输出语句位于外层作用域中，此时在for循环内部重新定义的i已经失效，因此实际输出的仍然是外层作用域中，此时在for循环内部重新定义的i已经失效，因此实际输出的仍然是外层作用域的i，值为100；
而sum经由循环累加，值变为了45。
